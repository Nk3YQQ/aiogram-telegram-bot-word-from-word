from aiogram.types import Message

from core.game import Game
from core.player import Player
from core.utils.for_handler import create_database, create_panel

menu_bottoms = create_panel("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "–ü–æ–º–æ—â—å", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
game_bottoms = create_panel("–°—Ç–æ–ø")
update_bottom = create_panel("–ú–µ–Ω—é")


class GameHandler:
    def __init__(self):
        self._player_states = {}
        self._player_info = {}

    async def _check_player_in_session(self, message, game):
        user_id = message.from_user.id
        if user_id not in self._player_states:
            player = Player(message.from_user.username)
            self._player_info[player.name] = player.user_words
            self._player_states[user_id] = game

        await message.answer("–ü–µ—Ä–µ–º–µ—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=menu_bottoms, one_time_keyboard=True)

    @staticmethod
    async def start(message: Message):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!", reply_markup=menu_bottoms, one_time_keyboard=True
        )

    async def menu(self, message: Message):
        game = Game()
        await self._check_player_in_session(message, game)

    async def run(self, message: Message):
        user_id = message.from_user.id
        if user_id not in self._player_states:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –º—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫—ç—àüôÇ", reply_markup=update_bottom)
            return

        user_game = self._player_states[user_id]
        await message.answer("–î–∞–≤–∞–π –ø—Ä–µ—Å—Ç—É–ø–∏–º –∫ –∏–≥—Ä–µ.")
        await message.answer(str(user_game.word_info), reply_markup=game_bottoms)

    async def check_player_word(self, message: Message):
        database = create_database(
            host_id="mongodb://localhost:27017", db_name="word_from_word", collection_name="players_scores"
        )
        user_id = message.from_user.id
        if user_id not in self._player_states:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", reply_markup=update_bottom)
            return

        user_game = self._player_states[user_id]
        player_name = message.from_user.username
        player_words = self._player_info[player_name]

        if len(player_words) == len(user_game.word_info.subwords):
            await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=menu_bottoms)
            database.add_score(player_name, len(player_words))
            player_words.clear()
            self._player_states[user_id] = Game()
            return

        user_word = message.text.lower()

        if message.text == "–°—Ç–æ–ø":
            await message.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–≥—Ä—É.", reply_markup=menu_bottoms)
            database.add_score(player_name, len(player_words))
            player_words.clear()
            self._player_states[user_id] = Game()
            return

        if user_word in player_words:
            await message.answer("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        elif len(user_word) < len(min(user_game.word_info.subwords, key=len)):
            await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        elif user_game.word_info.check_word(user_word):
            player_words.append(message.text)
            await message.answer(f"–í–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ - {len(player_words)}.")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")

    @staticmethod
    async def help_info(message: Message):
        await message.answer(
            '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É". –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç—ã–µ - –í–∞–º –Ω—É–∂–Ω–æ '
            "–±—É–¥–µ—Ç —É–≥–∞–¥–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ª–æ–≤. –ï—Å–ª–∏ –í–∞–º –Ω–∞–¥–æ–µ—Å—Ç —É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "
            '"–°—Ç–æ–ø", –∏ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
            '–∫–Ω–æ–ø–∫—É "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç".'
        )

    @staticmethod
    async def max_result(message: Message):
        database = create_database(
            host_id="mongodb://localhost:27017", db_name="word_from_word", collection_name="players_scores"
        )
        await message.answer(f"–í–∞—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {database.get_max_result(message.from_user.username)}.")
